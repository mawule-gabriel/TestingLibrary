package Controller.Views;

import Entity.Patron;
import Service.PatronService;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Stage;

import java.net.URL;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ResourceBundle;

public class PatronViewController implements Initializable {

    @FXML private TextField searchField;
    @FXML private TextField firstNameField;
    @FXML private TextField lastNameField;
    @FXML private TextField emailField;
    @FXML private TextField phoneField;
    @FXML private TextField addressField;
    @FXML private DatePicker membershipDatePicker;

    @FXML private TableView<Patron> patronTable;
    @FXML private TableColumn<Patron, Integer> idColumn;
    @FXML private TableColumn<Patron, String> firstNameColumn;
    @FXML private TableColumn<Patron, String> lastNameColumn;
    @FXML private TableColumn<Patron, String> emailColumn;
    @FXML private TableColumn<Patron, String> phoneColumn;
    @FXML private TableColumn<Patron, String> addressColumn;
    @FXML private TableColumn<Patron, LocalDate> membershipDateColumn;

    private PatronService patronService;
    private ObservableList<Patron> patronList;

    /**
     * Initializes the Patron View, sets up table columns, and loads patron data.
     */
    @Override
    public void initialize(URL url, ResourceBundle rb) {
        patronService = new PatronService();
        patronList = FXCollections.observableArrayList();

        // Initialize table columns
        idColumn.setCellValueFactory(new PropertyValueFactory<>("patronId"));
        firstNameColumn.setCellValueFactory(new PropertyValueFactory<>("firstName"));
        lastNameColumn.setCellValueFactory(new PropertyValueFactory<>("lastName"));
        emailColumn.setCellValueFactory(new PropertyValueFactory<>("email"));
        phoneColumn.setCellValueFactory(new PropertyValueFactory<>("phoneNumber"));
        addressColumn.setCellValueFactory(new PropertyValueFactory<>("address"));
        membershipDateColumn.setCellValueFactory(new PropertyValueFactory<>("membershipDate"));

        // Load initial data
        loadPatrons();

        // Add listener for table selection
        patronTable.getSelectionModel().selectedItemProperty().addListener((obs, oldSelection, newSelection) -> {
            if (newSelection != null) {
                showPatronDetails(newSelection);
            }
        });
    }


    /**
     * Searches for patrons based on the input in the search field (by ID or name).
     * Updates the patron table with search results.
     */
    @FXML
    private void handleSearch() {
        String searchText = searchField.getText().trim();
        patronList.clear(); // Clear previous results

        if (!searchText.isEmpty()) {
            try {
                int patronId = Integer.parseInt(searchText);
                Patron patron = patronService.getPatronById(patronId);
                if (patron != null) {
                    patronList.add(patron);
                } else {
                    showAlert(Alert.AlertType.INFORMATION, "Search Result", "No Patron Found", "No patron found with ID: " + patronId);
                }
            } catch (NumberFormatException e) {
                // Perform search by name if input is not a number
                try {
                    // Assuming a method in PatronService to search by name
                    patronList.addAll(patronService.searchPatronsByName(searchText));
                } catch (SQLException sqlEx) {
                    showAlert(Alert.AlertType.ERROR, "Error", "Database Error", sqlEx.getMessage());
                }
            } catch (SQLException e) {
                showAlert(Alert.AlertType.ERROR, "Error", "Database Error", e.getMessage());
            }
        } else {
            loadPatrons(); // Reload all patrons if the search field is empty
        }

        patronTable.setItems(patronList);
    }

    /**
     * Adds a new patron to the system if the input fields are valid.
     * Displays an alert if the patron is successfully added or if an error occurs.
     */
    @FXML
    private void handleAdd() {
        if (validateInput()) {
            try {
                Patron patron = new Patron(
                        0, // ID will be generated by database
                        firstNameField.getText(),
                        lastNameField.getText(),
                        emailField.getText(),
                        phoneField.getText(),
                        addressField.getText(),
                        membershipDatePicker.getValue()
                );

                patronService.addPatron(patron);
                loadPatrons();
                clearFields();
                showAlert(Alert.AlertType.INFORMATION, "Success", "Patron Added", "Patron was successfully added.");
            } catch (SQLException e) {
                showAlert(Alert.AlertType.ERROR, "Error", "Database Error", e.getMessage());
            }
        }
    }

    /**
     * Updates the address of the selected patron in the table.
     * Displays an alert upon success or failure.
     */
    @FXML
    private void handleUpdate() {
        Patron selectedPatron = patronTable.getSelectionModel().getSelectedItem();
        if (selectedPatron != null && validateInput()) {
            try {
                patronService.updatePatronAddress(selectedPatron.getPatronId(), addressField.getText());
                loadPatrons();
                clearFields(); // Clear fields after update
                showAlert(Alert.AlertType.INFORMATION, "Success", "Patron Updated", "Patron address was successfully updated.");
            } catch (SQLException e) {
                showAlert(Alert.AlertType.ERROR, "Error", "Database Error", e.getMessage());
            }
        } else {
            showAlert(Alert.AlertType.WARNING, "Warning", "No Selection", "Please select a patron to update.");
        }
    }

    /**
     * Deletes the selected patron from the system after confirmation.
     * Displays an alert upon success or failure.
     */
    @FXML
    private void handleDelete() {
        Patron selectedPatron = patronTable.getSelectionModel().getSelectedItem();
        if (selectedPatron != null) {
            Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
            alert.setTitle("Confirm Delete");
            alert.setHeaderText("Delete Patron");
            alert.setContentText("Are you sure you want to delete this patron?");

            if (alert.showAndWait().get() == ButtonType.OK) {
                try {
                    patronService.deletePatron(selectedPatron.getPatronId());
                    loadPatrons();
                    clearFields(); // Clear fields after deletion
                    showAlert(Alert.AlertType.INFORMATION, "Success", "Patron Deleted", "Patron was successfully deleted.");
                } catch (SQLException e) {
                    showAlert(Alert.AlertType.ERROR, "Error", "Database Error", e.getMessage());
                }
            }
        } else {
            showAlert(Alert.AlertType.WARNING, "Warning", "No Selection", "Please select a patron to delete.");
        }
    }

    /**
     * Clears all input fields and reloads the patron table.
     */
    @FXML
    private void handleClear() {
        clearFields();
        searchField.clear();
        loadPatrons();
    }

    /**
     * Loads all patrons from the database and updates the patron table.
     */
    private void loadPatrons() {
        try {
            patronList.clear();
            patronList.addAll(patronService.getAllPatrons());
            patronTable.setItems(patronList);
        } catch (SQLException e) {
            showAlert(Alert.AlertType.ERROR, "Error", "Database Error", e.getMessage());
        }
    }

    /**
     * Displays the details of the selected patron in the input fields.
     */
    private void showPatronDetails(Patron patron) {
        firstNameField.setText(patron.getFirstName());
        lastNameField.setText(patron.getLastName());
        emailField.setText(patron.getEmail());
        phoneField.setText(patron.getPhoneNumber());
        addressField.setText(patron.getAddress());
        membershipDatePicker.setValue(patron.getMembershipDate());  // Direct access to LocalDate
    }

    /**
     * Clears the input fields and resets the patron table selection.
     */
    private void clearFields() {
        firstNameField.clear();
        lastNameField.clear();
        emailField.clear();
        phoneField.clear();
        addressField.clear();
        membershipDatePicker.setValue(null);
        patronTable.getSelectionModel().clearSelection();
    }

    /**
     * Validates the input fields for adding or updating a patron.
     * Displays an error alert if any required fields are missing.
     */
    private boolean validateInput() {
        StringBuilder errorMessage = new StringBuilder();

        if (firstNameField.getText().trim().isEmpty()) {
            errorMessage.append("First name is required.\n");
        }
        if (lastNameField.getText().trim().isEmpty()) {
            errorMessage.append("Last name is required.\n");
        }
        if (emailField.getText().trim().isEmpty()) {
            errorMessage.append("Email is required.\n");
        }
        if (membershipDatePicker.getValue() == null) {
            errorMessage.append("Membership date is required.\n");
        }

        if (errorMessage.length() > 0) {
            showAlert(Alert.AlertType.ERROR, "Validation Error", "Please correct the following errors:", errorMessage.toString());
            return false;
        }

        return true;
    }

    /**
     * Displays an alert with the specified message and type.
     */
    private void showAlert(Alert.AlertType alertType, String title, String header, String content) {
        Alert alert = new Alert(alertType);
        alert.setTitle(title);
        alert.setHeaderText(header);
        alert.setContentText(content);
        alert.showAndWait();
    }

    /**
     * Navigates back to the Dashboard view.
     */
    @FXML
    public void handleBackToDashboard() {
        try {
            // Get the current stage (window)
            Stage stage = (Stage) searchField.getScene().getWindow();

            // Load the Dashboard view
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/org/example/librarymanagementsys/DashboardView.fxml"));
            Parent root = loader.load();

            // Create new scene and set it on the stage
            Scene scene = new Scene(root);
            scene.getStylesheets().add(getClass().getResource("/org/example/librarymanagementsys/dashboard.css").toExternalForm());

            stage.setScene(scene);  // Switch to the new scene
            stage.show();  // Display the new scene

        } catch (Exception e) {
            showAlert(Alert.AlertType.ERROR, "Error", "Navigation Error", "Failed to navigate to the Dashboard.");
            e.printStackTrace();
        }
    }
}